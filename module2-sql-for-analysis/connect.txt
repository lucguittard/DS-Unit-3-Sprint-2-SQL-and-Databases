#To connect csv data file to ElephantSQL, run the following in python

pipenv
!pip install psycopg2-binary (do this before going into python)
import psycopg2

#Set from a .csv file to Postgress (# titanic.csv example..)

# convert .csv to .sqlite
# refer to yesterday's notes: 

#DONE IN PYTHON 
# import sqlite
import sqlite3

# call the dataframe
import pandas as pd
dset = pd.read_csv('titanic.csv')

#Populate the database (sqlite)
# make the engine
from sqlalchemy import create_engine
engine = create_engine('sqlite://',echo=False)

# establish a connection with the desired database
conn = sqlite3.connect('buddymove_holidayiq.sqlite3') 
# connects the file to the database so queries can be run

# make the sqlite file; note you need to specify the connection defined above
dset.to_sql('titanic', conn)

# then cursor -> used for queries
curs = conn.cursor()

#DONE USING .py FILE
# make queries (only part of this process that can be run from .py file)

# query for number of rows
query = 'SELECT COUNT(*) FROM buddymove_holiday;'

# translate pandas dataframe to sql; run in command line
engine.execute(query).fetchall() 

# commit each query
conn.commit()

# close up each query
curs.close()    

# from sqlite to Postgress
!wget 'https://github.com/directory/file_db.sqlite3?raw=true'
!ls -ah
!mw 'titanic_db.sqlite3?raw=true' titanic_db.sqlite3

# import sqlite3
sl_conn = sqlite3.connect('titanic_db.sqlite3')
sl_curs = sl_conn.cursor()

# test output
sl_curs.execute('SELECT COUNT(*) FROM titanic').fetchall() 

# check the schema
sl_curs.execute('PRAGMA table_info(titanic);').fetchall()

# make a datatable 
create_specifier_table = """CREATE TABLE titanic(
    specifier_id SERIAL PRIMARY KEY, name VARCHAR(30), col1 INT, 
    col2 DECIMAL, col3 INT, etc INT);"""

# connect to Elephant via python 
pipenv
!pip install psycopg2-binary (do this before going into python)
import psycopg2

dbname = 'nrwsotro'
user = 'nrwsotro'
password = ' 60bRSYbWQSq14qksj1Ip-BVpbYSMkGqb'
host = 'salt.db.elephantsql.com (salt-01)'

pg_conn = psycopg2.connect(dbname = dbname, user = user, password = password, host = host)
pg_curs = pg_conn.cursor()
pg_curs.execute('SELECT * FROM test_table;') #need to have made a test_table in ElephantSQL
pg_curs.fetchall()
pg_conn = psycopg2.connect(dbname = dbname, user = user, password = password, host = host)

pg_curs.execute(create_specifier_table)
show_tables = "SELECT * FROM pg_catalog.pg_tables WHERE schemaname !=
    'pg_catalog' AND schemaname != 'information_schema';"""
pg_curs.execute(show_tables)
pg_curs.fetchall()

# populate the data to the ElephantSQL instance
for entry in entries:
    insert_entry = """INSERT INTO datatable_name(
        col1, col2, col3, col4) VALUES()""" + str(character[1:]) + ';'
    pg_curs.execute(insert_character)

# check output
pg_curs.execute('SELECT * FROM titanic_table;')
pg_curs.fetchall()

# save changes
pg_curs.close()
pg_conn.commit()

# check process
pg_curs = pg_conn.cursor()
pg_curs.execute('SELECT * FROM titanic_table')
pg_characters = pg_curs.fetchall()

for character, pg_character in zip(character, pg_characters):
    zip(character, pg_characters):
    assert character == pg_characters

